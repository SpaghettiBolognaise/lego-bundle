<?php

namespace Idk\LegoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Idk\LegoBundle\Entity\AttachableFile;

/**
 * IdkFinderFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttachableFileRepository extends EntityRepository
{
	public function findRacine(){
        $qb = $this->createQueryBuilder('f');
        $qb->andWhere('f.folder is NULL');
        return $qb->getQuery()->getResult();
    }

    public function findRacineByClassAndItemId($class,$itemId,$zoneCode = null){
        $qb = $this->createQueryBuilder('f');
        $qb->andWhere('f.folder is NULL');
        $qb->andWhere('f.itemId = :itemId')->setParameter('itemId',$itemId);
        $qb->andWhere('f.class = :class')->setParameter('class',$class);
        if($zoneCode) $qb->andWhere('f.zoneCode = :zone')->setParameter('zone',$zoneCode);
        return $qb->getQuery()->getResult();
    }

    public function isExist(AttachableFile $file){
        $qb = $this->createQueryBuilder('f');
        $qb->andWhere('f.itemId = :id')->setParameter('id',$file->getItemId());
        $qb->andWhere('f.realClass = :class')->setParameter('class',$file->getRealClass());
        $qb->andWhere('f.nom = :nom')->setParameter('nom',$file->getNom());
        if($file->getZoneCode()) $qb->andWhere('f.zoneCode = :zonecode')->setParameter('zonecode',$file->getZoneCode());
        $items = $qb->getQuery()->getResult();
        if(count($items)){
            return true;
        }else{
            return false;
        }
    }

    public function get($item,$options = array()){
        $type = (isset($options['type']))? $options['type']:null;
        $zone = (isset($options['zone']))? $options['zone']:null;
        $limit = (isset($options['limit']))? $options['limit']:null;
        $em = $this->getEntityManager();
        $realClass = $em->getClassMetadata(get_class($item))->getName();
        $qb = $this->createQueryBuilder('a')
        ->where('a.realClass = :class')->setParameter('class',$realClass)
        ->andwhere('a.itemId = :itemid')->setParameter('itemid',$item->getId());
        if($type) $qb->andwhere('a.type = :type or a.subType = :type')->setParameter('type',$type);
        if($zone) $qb->andwhere('a.zoneCode = :zone')->setParameter('zone',$zone);
        if($limit && strtolower($limit) != 'first') $qb->setMaxResults($limit);
        $return = $qb->getQuery()->getResult();
        if(strtolower($limit) == 'first'){
            return (count($return))? $return[0]:null;
        }
        return $return;
    }


    public function getSummaryByClassAndItemId($class,$itemId,$options = array()){
        $type = (isset($options['type']))? $options['type']:null;
        $zoneCode = (isset($options['zone']))? $options['zone']:null;
        $qb = $this->createQueryBuilder('f');
        $qb->select('count(f.id) as nb, sum(f.taille)/(1024*1024) as taille');
        $qb->andWhere('f.folder is NULL');
        $qb->andWhere('f.itemId = :itemId')->setParameter('itemId',$itemId);
        $qb->andWhere('f.class = :class')->setParameter('class',$class);
        if($type) $qb->andwhere('f.type in (:type) or f.subType in (:type)')->setParameter('type',$type);
        if($zoneCode) $qb->andWhere('f.zoneCode = :zone')->setParameter('zone',$zoneCode);
        return $qb->getQuery()->getOneOrNullResult();
    }
}
